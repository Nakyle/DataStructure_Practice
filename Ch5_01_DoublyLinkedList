public class DoublyLinkedList {

	public static void main(String[] args) {
		DoublyLinkedList numbers = new DoublyLinkedList();

		// 추가
		numbers.addFirst(27);

		// 추가
		numbers.addLast(5);
		numbers.addLast(10);
		numbers.addLast(20);
		numbers.addLast(30);
		// System.out.println(numbers.node(0));

		numbers.add(1, 15);
		// index 1에 15를 삽입한다.
		// 즉 10과 20 사이에 15를 삽입한다.

		System.out.println(numbers);

		System.out.println(numbers.removeFirst());
		System.out.println(numbers.remove(1));
		System.out.println(numbers.removeLast());
		
		System.out.println();
		System.out.println(numbers);

		System.out.println(numbers.size()); // 사이즈 조회
		System.out.println(numbers.get(1)); // 특정위치의 값 조회

		System.out.println(numbers.indexOf(15));
		// 20이라는 값의 인덱스 위치를 조회
	}

	private Node head;
	private Node tail;
	private int size = 0;

	private class Node {
		private Object data; // 데이터 저장
		private Node next; // 다음 노드
		private Node prev; // 이전 노드

		public Node(Object input) {
			this.data = input;
			this.next = null;
			this.prev = null;
		}

		public String toString() {
			return String.valueOf(this.data);
		}

	}

	public void addFirst(Object input) {
		Node newNode = new Node(input);
		newNode.next = head;

		if (head != null)
			head.prev = head;

		head = newNode; // 헤드로 새로운 노드 지정
		size++;
		if (head.next == null) {
			tail = head;
		}
	}

	public void addLast(Object input) {
		Node newNode = new Node(input);

		// 리스트의 노드가 없다면 첫번째 노드를 추가하는 메소드 사용
		if (size == 0) {
			addFirst(input);
		} else {
			// tail이 가리키는 노드의 next가 새로운 노드를 가리킴
			tail.next = newNode;

			// 새로운 노드의 이전 노드로 tail 지정
			newNode.prev = tail;

			// 마지막 노드 갱신
			tail = newNode;

			size++;
		}
	}

	// 인자로 전달된 index에 해당되는 Node를 찾아서 return 해주는 함수
	Node node(int index) {
		// 노드의 인덱스가 전체 노드 수의 반보다 큰지 작은지 계산
		if (index < size / 2) {
			// head부터 next를 이용해서 인덱스에 해당하는 노드 탐색
			Node x = head;
			for (int i = 0; i < index; i++)
				x = x.next;
			return x;
		} else {
			// tail부터 prev를 이용해서 인덱스에 해당하는 노드 탐색
			Node x = tail;
			for (int i = size - 1; i > index; i--)
				x = x.prev;
			return x;
		}
	}

	public void add(int k, Object input) {
		// 만약 k가 0이라면 첫번째 노드에 추가하는 것이기 때문에 addFirst 사용
		if (k == 0) {
			addFirst(input);
		} else {
			Node temp1 = node(k - 1);

			// k 번째 노드를 temp2로 지정
			Node temp2 = temp1.next;
			Node newNode = new Node(input);
			
			// temp1의 다음 노드로 새로운 노드 지정
			temp1.next = newNode;

			// 새로운 노드의 다음 노드로 temp2 지정
			newNode.next = temp2;

			// 만약 temp2가 존재한다면,
			// temp2의 이전 노드로 새로운 노드 지정
			if (temp2 != null)
				temp2.prev = newNode;

			// 새로운 노드의 이전 노드로 temp1 지정
			newNode.prev = temp1;
			size++;

			// 새로운 노드의 다음 노드가 없다면 새로운 노드가 마지막 노드이기 때문에 tail 지정
			if (newNode.next == null) {
				tail = newNode;
			}
		}
	}

	public String toString() {
		if (head == null) {
			return "[]";
		}

		// 탐색시작
		Node temp = head;
		String str = "[";

		// 마지막 노드는 다음 노드가 없기 때문에 마지막 노드 제외
		while (temp.next != null) {
			str += temp.data + ",";
			temp = temp.next;
		}
		// 마지막 노드 포함
		str += temp.data;
		return str + "]";
	}

	public Object removeFirst() {
		// 첫번째 노드를 temp로 지정하고 head의 값을 두번째 노드로 변경
		Node temp = head;
		head = temp.next;
		// 데이터를 삭제하기 전에 리턴할 값을 임시 변수에 저장
		Object returnData = temp.data;
		temp = null;
		// 리스트 내에 노드가 있다면 head의 이전 노드를 null로 지정
		if (head != null)
			head.prev = null;
		size--;
		return returnData;
	}

	public Object remove(int k) {
		if (k == 0)
			return removeFirst();

		// k-1번째 노드를 temp로 지정
		Node temp = node(k - 1);

		// temp.next를 삭제하기 전에 todoDeleted 변수에 보관
		Node todoDeleted = temp.next;

		// 삭제 대상 노드를 연결에서 분리
		temp.next = temp.next.next;
		if (temp.next != null) {
			// 삭제할 노드의 전후 노드 연결
			temp.next.prev = temp;
		}

		// 삭제된 노드의 데이터를 리턴하기 위해 returnData에 데이터 저장
		Object returnData = todoDeleted.data;

		// 삭제된 노드가 tail이었다면 tail을 이전 노드의 tail로 지정
		if (todoDeleted == tail) {
			tail = temp;
		}

		// cur.next 삭제
		todoDeleted = null;
		size--;
		return returnData;
	}

	public Object removeLast() {
		return remove(size - 1);
	}

	public int size() {
		return size;
	}

	public Object get(int k) {
		Node temp = node(k);
		return temp.data;
	}

	public int indexOf(Object data) {
		// 탐색 대상이 되는 노드를 temp로 지정
		Node temp = head;

		// 탐색 대상이 몇번째 엘리먼트에 있는지를 의미하는 변수
		int index = 0;

		// 탐색 값과 탐색 대상 값 비교
		while (temp.data != data) {
			temp = temp.next;
			index++;

			// 더 이상 탐색 대상이 없음
			if (temp == null)
				return -1;
		}

		return index;
	}
}
